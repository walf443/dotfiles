" autocmd
autocmd!

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/Users/yoshimin/src/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/Users/yoshimin/src/github.com/Shougo/dein.vim/')
  call dein#begin('/Users/yoshimin/src/github.com/Shougo/dein.vim/')

  " Let dein manage dein
  " Required:
  call dein#add('/Users/yoshimin/src/github.com/Shougo/dein.vim/')

  " You can specify revision/branch/tag.
  call dein#add('tpope/vim-surround')

  call dein#add('Shougo/vimshell')
  call dein#add('Shougo/unite.vim')
  call dein#add('Shougo/vimproc')
  call dein#add('thinca/vim-ref')
  call dein#add('slim-template/vim-slim')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

" set bufname to screen's title
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | silent! exe printf('!echo -n "\ek%%:t[%d]\e\\"', winnr("$")) | endif

filetype plugin indent on
syntax enable

" option
set ambiwidth=double
set autoindent
set background=dark
set backspace=eol,indent,start
set cindent
set expandtab
" set ignorecase
set incsearch
set list
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set shiftwidth=4
set showmatch
set showmode
set smartcase
set tabstop=4
set splitright

" encoding
set fileencoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos,mac
set encoding=utf-8

" statusline
set statusline=%<%f\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%4v\ %l/%L
set laststatus=2

colorscheme wambat

" mapping
nnoremap <Leader>ev  <C-w>s:<C-u>edit $MYVIMRC<Enter>
nnoremap <Leader>ez  <C-w>s:<C-u>edit $MYZSHRC<Enter>
nnoremap <Leader>ec  <C-w>s:<C-u>edit $MYCHANGELOG_MEMO<Enter>
nnoremap <Leader>s. :<C-u>source $MYVIMRC<Enter>
nnoremap <Leader>ex  :execute '!' &ft ' %'<Enter>
nnoremap <C-h>      :<C-u>Ref <C-R>=ref#detect()<CR><Space>

" unite
nnoremap    [unite]   <Nop>
nmap    f [unite]
nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file_rec/async:!<CR>
nnoremap <silent> [unite]b  :<C-u>Unite -buffer-name=files buffer tag file_mru<CR>
nnoremap <silent> [unite]t  :<C-u>Unite -buffer-name=files tab buffer file_mru<CR>
nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]o  :<C-u>Unite -buffer-name=files outline<CR>
nnoremap <silent> [unite]s  :<C-u>Unite -buffer-name=source   source<CR>

nnoremap NT :<C-u>NERDTree<CR>

" Gtags
nnoremap gl <C-w>s:<C-u>:GtagsCursor<CR>
nnoremap GL :<C-u>GtagsCursor<CR>

call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_source_file_mru_limit = 200
let g:unite_enable_start_insert = 1
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_source_file_mru_time_format = '(%y/%m/%d %H:%M) '
let g:unite_source_directory_mru_time_format = '(%y/%m/%d %H:%M) '
let g:unite_source_file_rec_max_depth = 7

cnoremap <expr> /  getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ?  getcmdtype() == '?' ? '\?' : '?'

" jump and move centor
nnoremap n  nzz
nnoremap N  Nzz

" motion
noremap j gj
noremap k gk
noremap gj j
noremap gk k
inoremap <C-A>  <ESC>^i
noremap <C-E>   <END>
inoremap <C-E>  <END>

iabbrev <expr> df,  strftime('%Y-%m-%d %H:%M:%S')
iabbrev <expr> dd,  strftime('%Y-%m-%d')
iabbrev <expr> dt,  strftime('%H:%M:%S')

nnoremap gc `[v`]
vnoremap gc :<C-u>normal gc<Enter>
onoremap gc :<C-u>normal gc<Enter>

" Ex Command
command! Cp932      edit ++enc=cp932
command! Eucjp      edit ++enc=euc-jp
command! Iso2022jp  edit ++enc=iso-2022-jp
command! Utf8       edit ++enc=utf8

command! Jis        Iso2022jp
command! Sjis       cp932

" カーソル下の文字も消す
func! Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc

" for ftplugin/changelog.vim
let g:changelog_timeformat = "%Y-%m-%d %H:%M:%S"
let g:changelog_username = "Keiji Yoshimi"

" 対応する括弧の強調表示はウザいので消す
let loaded_matchparen = 1

let g:ref_phpmanual_path = $HOME . "/project/dotfiles/vim/ref/php_manual_ja_html/"

" let g:ref_alc_cmd = 'w3m -dump %s'
" not work with pathogen.
" call ref#register_detection('_', 'alc')

source $VIMRUNTIME/macros/matchit.vim

let g:user_zen_settings = {
            \    'php' : {
            \        'extends' : 'html',
            \        'filters' : 'c',
            \    },
            \    'tt2html' : {
            \        'extends' : 'html',
            \    },
            \    'tmt2html' : {
            \        'extends' : 'html',
            \    },
            \}

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_split_action = "split"
let g:GtagsCscope_Auto_Load = 0

let g:neocomplcache_enable_at_startup = 0
